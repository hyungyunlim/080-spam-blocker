; ==========================================================
;  1. Quectel 모뎀으로 전화/문자 수신 시 처리
; ==========================================================
[incoming-mobile]

exten => sms,1,Verbose(Incoming SMS from ${CALLERID(num)} ${BASE64_DECODE(${SMS_BASE64})})
exten => sms,n,Set(FILE(/var/log/asterisk/sms.txt,,,a)=SMS From ${CALLERID(num)} on ${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
exten => sms,n,System(echo "" >> /var/log/asterisk/sms.txt)
exten => sms,n,Set(FILE(/var/log/asterisk/sms.txt,,,a)=${BASE64_DECODE(${SMS_BASE64})})
exten => sms,n,System(echo "" >> /var/log/asterisk/sms.txt)
exten => sms,n,Hangup()

exten => _.,1,Set(CALLERID(name)=${CALLERID(num)})
exten => _.,n,Goto(from-trunk,${EXTEN},1)


; ==========================================================
;  2. Call File을 통해 발신 전화 처리 (개선된 버전)
; ==========================================================

; ==========================================================
;  2. Call File을 통해 발신 전화 처리 (2단계 DTMF 버전)
; ==========================================================

[callfile-handler]
; Call File이 quectel 채널로 전화를 걸고, 상대방이 받으면 이 컨텍스트를 실행합니다.
exten => s,1,NoOp(== Call answered. Executing actions for CallFile ID: ${CALLFILE_ID} ==)
exten => s,n,System(echo "${STRFTIME(${EPOCH},,%F %T)} [${CALLFILE_ID}] CALL_ANSWERED" >> /var/log/asterisk/call_progress/${CALLFILE_ID}.log)
exten => s,n,Answer()
exten => s,n,Wait(1)

; 1. AstDB에서 변수 값 가져오기
exten => s,n,Set(DTMF_TO_SEND=${DB(CallFile/${CALLFILE_ID}/dtmf)})
exten => s,n,Set(DIALED_NUMBER_FOR_REC=${DB(CallFile/${CALLFILE_ID}/recnum)})

; 2. AstDB에서 사용한 데이터 삭제 (정리)
exten => s,n,NoOp(${DB_DELETE(CallFile/${CALLFILE_ID}/dtmf)})
exten => s,n,NoOp(${DB_DELETE(CallFile/${CALLFILE_ID}/recnum)})

; 3. 로그 남기기
exten => s,n,NoOp(Retrieved from DB -> DTMF: ${DTMF_TO_SEND}, Number for Rec: ${DIALED_NUMBER_FOR_REC})

; 4. DTMF 분리 (예: 105623#1 -> 105623# 와 1)
exten => s,n,Set(DTMF_LEN=${LEN(${DTMF_TO_SEND})})
exten => s,n,Set(DTMF_FIRST=${DTMF_TO_SEND:0:$[${DTMF_LEN}-1]})
exten => s,n,Set(DTMF_SECOND=${DTMF_TO_SEND:$[${DTMF_LEN}-1]:1})
exten => s,n,NoOp(Split DTMF -> First: ${DTMF_FIRST}, Second: ${DTMF_SECOND})

; 5. 녹음 파일 이름 설정 및 녹음 시작
exten => s,n,Set(TIMESTAMP=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
exten => s,n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${TIMESTAMP}-FROM_SYSTEM-ID_${CALLFILE_ID}-TO_${DIALED_NUMBER_FOR_REC})
exten => s,n,System(echo "${STRFTIME(${EPOCH},,%F %T)} [${CALLFILE_ID}] RECORDING_START ${MONITOR_FILENAME}.wav" >> /var/log/asterisk/call_progress/${CALLFILE_ID}.log)
exten => s,n,NoOp(Starting recording: ${MONITOR_FILENAME}.wav)
exten => s,n,MixMonitor(${MONITOR_FILENAME}.wav,W(2))
exten => s,n,Wait(2)
exten => s,n,Set(CONFIRM_DELAY=${IF($[${EXISTS(${CONFIRM_DELAY})}]?${CONFIRM_DELAY}:1)})
exten => s,n,Set(CONFIRM_REPEAT=${IF($[${EXISTS(${CONFIRM_REPEAT})}]?${CONFIRM_REPEAT}:1)})
exten => s,n,NoOp(Recording should be active now)

; 6. 초기 시스템 안내 대기 (Answer(1초) + 녹음안정화(2초) + 이 대기(3초) = 총 6초)
exten => s,n,NoOp(Waiting for initial system greeting - timing for 6-7 seconds...)
exten => s,n,Wait(3)

; 7. 1단계 DTMF 전송 (105623# 등, 마지막 1 제외)
exten => s,n,NoOp(Sending FIRST DTMF at 6-7 second mark: ${DTMF_FIRST})
exten => s,n,System(echo "${STRFTIME(${EPOCH},,%F %T)} [${CALLFILE_ID}] DTMF_FIRST_SENT ${DTMF_FIRST}" >> /var/log/asterisk/call_progress/${CALLFILE_ID}.log)
exten => s,n,SendDTMF(wwwwwwwwww${DTMF_FIRST})
exten => s,n,Wait(1)

; 8. 시스템 확인 요청 대기 ("105623번이 맞으면 1번을 눌러주세요")
exten => s,n,NoOp(Waiting for system confirmation request...)
exten => s,n,System(echo "${STRFTIME(${EPOCH},,%F %T)} [${CALLFILE_ID}] WAITING_FOR_CONFIRM_PROMPT" >> /var/log/asterisk/call_progress/${CALLFILE_ID}.log)
exten => s,n,Wait(5)

; 9. 2단계 DTMF 전송 (확인을 위한 "1")
exten => s,n,NoOp(Sending SECOND DTMF for confirmation ${CONFIRM_REPEAT} times every ${CONFIRM_DELAY}s: ${DTMF_SECOND})
exten => s,n,System(echo "${STRFTIME(${EPOCH},,%F %T)} [${CALLFILE_ID}] DTMF_SECOND_LOOP_START repeat=${CONFIRM_REPEAT} delay=${CONFIRM_DELAY}" >> /var/log/asterisk/call_progress/${CALLFILE_ID}.log)
exten => s,n,Set(LP_CNT=0)
exten => s,n(loop_confirm_v1),SendDTMF(${DTMF_SECOND})
exten => s,n,System(echo "${STRFTIME(${EPOCH},,%F %T)} [${CALLFILE_ID}] DTMF_SECOND_SENT count=${LP_CNT}" >> /var/log/asterisk/call_progress/${CALLFILE_ID}.log)
exten => s,n,Set(LP_CNT=$[${LP_CNT}+1])
exten => s,n,GotoIf($[${LP_CNT} >= ${CONFIRM_REPEAT}]?loop_confirm_done_v1)
exten => s,n,Wait(${CONFIRM_DELAY})
exten => s,n,Goto(loop_confirm_v1)
exten => s,n(loop_confirm_done_v1),NoOp(Completed ${CONFIRM_REPEAT} confirmation DTMF sends)
exten => s,n,Wait(1)

; 10. 최종 처리 및 결과 안내 대기
exten => s,n,NoOp(Waiting for final processing and confirmation message...)
exten => s,n,Wait(12)

; 11. 녹음 완료 및 통화 종료 (총 약 30초 녹음)
exten => s,n,NoOp(Recording completed - total ~30 seconds from answer)
exten => s,n,System(echo "${STRFTIME(${EPOCH},,%F %T)} [${CALLFILE_ID}] RECORDING_COMPLETE" >> /var/log/asterisk/call_progress/${CALLFILE_ID}.log)
exten => s,n,Hangup() 


[spam-blocker]
exten => s,1,NoOp(== Call answered. Executing actions for CallFile ID: ${CALL_ID} ==)
exten => s,n,Answer()

; 1. AstDB에서 변수 값 가져오기
exten => s,n,Set(DTMF_TO_SEND=${DB(CallFile/${CALL_ID}/dtmf_sequence)})
exten => s,n,Set(NOTIFICATION_PHONE=${DB(CallFile/${CALL_ID}/notification_phone)})
exten => s,n,Set(IDENTIFICATION_NUMBER=${DB(CallFile/${CALL_ID}/identification_number)})

; 2. Call File에서 전달된 타이밍 변수 사용
exten => s,n,Set(INITIAL_WAIT=${IF($["${__INITIAL_WAIT}" != ""]?${__INITIAL_WAIT}:3)}) ; 패턴값이 있으면 사용, 없으면 3초
exten => s,n,Wait(${INITIAL_WAIT})

; 3. AstDB에서 사용한 데이터 삭제 (정리)
exten => s,n,NoOp(${DB_DELETE(CallFile/${CALL_ID}/dtmf_sequence)})
exten => s,n,NoOp(${DB_DELETE(CallFile/${CALL_ID}/notification_phone)})
exten => s,n,NoOp(${DB_DELETE(CallFile/${CALL_ID}/identification_number)})

; 4. 로그 남기기
exten => s,n,NoOp(Retrieved from DB -> DTMF: ${DTMF_TO_SEND}, Notify: ${NOTIFICATION_PHONE})
exten => s,n,NoOp(Timing -> Initial: ${INITIAL_WAIT}s, Confirm: ${CONFIRM_WAIT}s, Total: ${TOTAL_DURATION}s)


; ----- 080 번호 우선 결정 (AstDB → CHANNEL 순)
exten => s,n,Set(DIALED_NUMBER=${DB(CallFile/${CALL_ID}/recnum)})
exten => s,n,ExecIf($[${LEN(${DIALED_NUMBER})}=0]?Set(__RAW=${CUT(CHANNEL,/,3)}))
exten => s,n,ExecIf($[${LEN(${DIALED_NUMBER})}=0]?Set(DIALED_NUMBER=${FILTER(0-9,${CUT(__RAW,-,1)})}))


; 5. 녹음 파일 이름 설정 및 녹음 시작
exten => s,n,Set(TIMESTAMP=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
exten => s,n,NoOp(Original CHANNEL: ${CHANNEL})
exten => s,n,ExecIf($[${LEN(${DIALED_NUMBER})}=0]?Set(__DIALED_NUMBER_RAW=${CUT(CHANNEL,/,3)}))
exten => s,n,ExecIf($[${LEN(${DIALED_NUMBER})}=0]?Set(DIALED_NUMBER=${FILTER(0-9,${CUT(__DIALED_NUMBER_RAW,-,1)})}))
exten => s,n,NoOp(Parsed dialed number for recording: ${DIALED_NUMBER})
exten => s,n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${TIMESTAMP}-FROM_SYSTEM-TO_${DIALED_NUMBER})
exten => s,n,NoOp(Starting recording: ${MONITOR_FILENAME}.wav)
exten => s,n,MixMonitor(${MONITOR_FILENAME}.wav)

; 6. DTMF 전송
; --- 식별번호 전송 타이밍 조정 ---
exten => s,n,Set(ADDITIONAL_WAIT=$[${DTMF_TIMING}-${INITIAL_WAIT}])
exten => s,n,ExecIf($[${ADDITIONAL_WAIT} > 0]?Wait(${ADDITIONAL_WAIT}))
exten => s,n,NoOp(Sending ID DTMF: ${DTMF_TO_SEND})
exten => s,n,SendDTMF(${DTMF_TO_SEND})
; 확인 DTMF 딜레이 및 반복 설정
exten => s,n,Set(CONFIRM_DELAY=${IF($["${__CONFIRM_DELAY}" != ""]?${__CONFIRM_DELAY}:2)})
exten => s,n,Set(CONFIRM_REPEAT=${IF($["${__CONFIRM_REPEAT}" != ""]?${__CONFIRM_REPEAT}:1)})
exten => s,n,Set(COUNTER=1)
exten => s,n(loop_confirm),Wait(${CONFIRM_DELAY})
exten => s,n,NoOp(Sending confirmation DTMF attempt ${COUNTER}/${CONFIRM_REPEAT}: ${CONFIRM_DTMF:-1})
exten => s,n,ExecIf($[${LEN(${CONFIRM_DTMF})}>0]?SendDTMF(${CONFIRM_DTMF}):SendDTMF(1))
exten => s,n,Set(COUNTER=$[${COUNTER}+1])
exten => s,n,GotoIf($[${COUNTER} <= ${CONFIRM_REPEAT}]?loop_confirm)
; ---- End of confirmation loop ----

; 7. 최종 대기 및 통화 종료
exten => s,n,Set(REMAINING_WAIT=$[${TOTAL_DURATION} - ${INITIAL_WAIT} - ${CONFIRM_DELAY}])
exten => s,n,GotoIf($[${REMAINING_WAIT} > 0]?final_wait)
exten => s,n,Hangup()

exten => s,n(final_wait),Wait(${REMAINING_WAIT})
exten => s,n,Hangup()

; ==========================================================
;  3. 패턴 파악용 Context (개선된 버전)
; ==========================================================

[pattern-discovery] 
exten => s,1,NoOp(== Pattern Discovery Call Started - ID: ${DISCOVERY_ID} ==)
exten => s,n,Answer()
exten => s,n,Wait(1)

; 1. DB에서 전화번호를 가져와 녹음 파일 이름 설정
exten => s,n,Set(DIALED_NUMBER=${DB(Discovery/${DISCOVERY_ID}/phone)})
exten => s,n,Set(TIMESTAMP=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
exten => s,n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${TIMESTAMP}-discovery-${DIALED_NUMBER})
exten => s,n,NoOp(Starting pattern discovery recording: ${MONITOR_FILENAME}.wav)
exten => s,n,MixMonitor(${MONITOR_FILENAME}.wav)

; 2. 패턴 파악을 위한 긴 녹음 (45초)
exten => s,n,NoOp(Listening to system for pattern analysis - 45 seconds)
exten => s,n,Wait(45)
exten => s,n,StopMixMonitor()

; 3. Python 분석 스크립트 직접 실행 (PHP 스크립트 호출 방식 제거)
exten => s,n,NoOp(Triggering ADVANCED analysis script for Discovery ID: ${DISCOVERY_ID})
exten => s,n,Set(PYTHON_SCRIPT=/home/linux/080-spam-blocker/advanced_pattern_analyzer.py)
exten => s,n,Set(MONITOR_FULL_PATH=/var/spool/asterisk/monitor/${MONITOR_FILENAME}.wav)
exten => s,n,Set(LOG_FILE=/var/www/html/spam/analysis_logs/discovery_${DISCOVERY_ID}.log)
exten => s,n,System(env HOME=/tmp /usr/bin/python3 ${PYTHON_SCRIPT} --audio_file ${MONITOR_FULL_PATH} --phone_number ${DIALED_NUMBER} > ${LOG_FILE} 2>&1 &)

exten => s,n,Hangup()

; ==========================================================
;  4. 음성 분석 처리용 Context
; ==========================================================

[analysis-handler]
exten => s,1,NoOp(== Voice Analysis Handler Started for Job ID: ${JOB_ID} ==)
exten => s,n,Answer()

; 1. PHP에서 전달된 변수 가져오기
exten => s,n,Set(BASE_FILENAME=${CUT(RECORDING_FILE,,1)})
exten => s,n,Set(RECORDING_FULL_PATH=/var/spool/asterisk/monitor/${RECORDING_FILE})
exten => s,n,NoOp(Analyzing file: ${RECORDING_FULL_PATH})
exten => s,n,NoOp(Job ID: ${JOB_ID}, Model: ${MODEL_SIZE})

; 2. 필요한 경로 설정
exten => s,n,Set(BASE_DIR=/var/www/html/spam)
exten => s,n,Set(PYTHON_SCRIPT=/home/linux/080-spam-blocker/simple_analyzer_with_progress.py)
exten => s,n,Set(PROGRESS_FILE=${BASE_DIR}/analysis_progress/${JOB_ID}.json)
exten => s,n,Set(RESULT_FILE=${BASE_DIR}/analysis_results/${JOB_ID}.json)
exten => s,n,Set(LOG_FILE=${BASE_DIR}/analysis_logs/${JOB_ID}.log)

; 3. 파이썬 스크립트 실행 (System 함수 사용)
;    - Asterisk 권한으로 실행되므로, 권한 문제 해결
;    - HOME 환경 변수를 /tmp로 설정하여 라이브러리 캐시 문제 해결
exten => s,n,NoOp(Executing Python script via Asterisk System())
exten => s,n,System(env HOME=/tmp /usr/bin/python3 ${PYTHON_SCRIPT} ${RECORDING_FULL_PATH} ${RESULT_FILE} ${PROGRESS_FILE} ${JOB_ID} ${MODEL_SIZE} > ${LOG_FILE} 2>&1 &)

; 4. 작업 완료 후 정리
exten => s,n,Wait(2) ; 스크립트가 시작될 시간을 줌
exten => s,n,NoOp(== Analysis job submitted, hanging up. ==)
exten => s,n,Hangup() 
